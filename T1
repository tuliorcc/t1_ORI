Trabalho 1: Implementação de arquivo sem ordenação

Apresentação
O conhecimento e o entendimento das organizações de arquivos são essenciais para a formação do aluno em computação. Este trabalho propõe a implementação de uma estrutura mais simplificada, mas que reúne as principais características relativas ao acesso e organização de dados em memória secundária.

Objetivos
Este trabalho tem os seguintes objetivos principais:

Recapitulação de programação com manipulação de arquivos;
Entendimento do processo de armazenamento em blocos;
Consolidação dos conhecimentos sobre campos e registros.
Ainda, há objetivos secundários:

Prática de trabalho em grupo;
Divisão e gestão do trabalho;
Responsabilidade na elaboração de trabalhos em grupo.
Elaboração e responsabilidades
O trabalho deve ser desenvolvido em grupos de dois ou três alunos. Submissões com número de alunos fora destes limites terão seus trabalhos desconsiderados e receberão nota 0,0. Os membros dos grupos podem misturar alunos da turma A e da turma B.

Todos os alunos do grupo são solidariamente responsáveis pelo material entregue. Assim, todos obterão a mesma nota como resultado da avaliação do trabalho. Da mesma forma, todos serão responsabilizados igualmente no caso de detecção de situação de desonestidade (cópia, plágio etc.).

Qualquer código que não seja de autoria do grupo e se deseje usar no trabalho somente poderá ser incluído com autorização expressa do professor. Neste caso, a fonte do código deve ser citada adequadamente. Caso contrário, o código será considerado como plágio.

Espera-se que o trabalho tenha a participação de todos os membros do grupo.

Descrição do arquivo e contexto
O arquivo a ser implementado deve ter as seguintes características:

Não estabelecer qualquer ordenação entre seus registros;
Possuir registros de tamanho fixo e no máximo 100 bytes cada um;
Ter controle de blocos, de forma que cada bloco possua um número inteiro de registros.
Para esta implementação, supõe-se que os blocos possuem 512 bytes cada um.

Proposta do trabalho
O trabalho consiste na implementação de um programa que permita as seguintes operações:

Criação de um arquivo vazio;
Inserção de um novo registro;
Busca por um registro, dada uma chave;
Remoção de um registro, dada uma chave;
Listagem dos registros;
Compactação do arquivo.
O arquivo de dados pode ser fixo no programa. Ou seja, não é preciso que o usuário indique o seu nome.

O formato e conteúdo dos registros é livre, obedecida a limitação do tamanho máximo já definido.

A operação de criação consiste em criar um arquivo vazio. Esta operação pode sobrescrever um arquivo preexistente.

A inserção de um registro deve fazer a leitura dos dados e inserir o registro no arquivo. Devem ser aproveitados os espaços disponíveis gerados por remoções. Não deve haver preocupação quanto a repetições de valores. Opcionalmente à leitura, os dados podem ser gerados aleatoriamente.

Uma busca por um registro deve ser feita dado o valor de uma chave. Cada trabalho deve eleger uma única chave para esta busca. Como há possibilidade de repetições, apenas a primeira ocorrência da chave deve ser retornada. O conteúdo do registro encontrado deve ser apresentado no caso de busca bem sucedida.

A remoção, que é precedida de um busca, deve ser feita de forma lógica. Assim, apenas deve-se controlar a validade ou não dos registros.

A listagem corresponde à apresentação de todos os registros válidos existentes no arquivo, na ordem física em que aparecem.

A operação de manutenção corresponde à compactação dos dados do arquivo, ou seja, à eliminação de todos os espaços disponíveis. Esta operação deve eliminar também blocos que fiquem vazios.

Uma opção para inserção "em lote" pode ser implementada e é bem-vinda. Nesta opção, solicita-se quantos registros devem ser inseridos, chamando-se a operação de inserção sucessivamente com dados aleatórios.

A implementação pode ser feita nas seguintes linguagens de programação:

C
C++
Java
Python
O uso de qualquer outra linguagem deve ser autorizado pelo professor, mediante solicitação justificada.

O que enviar e quando
Deve ser enviado um único arquivo com o código elaborado. Caso seja feita a opção pela codificação em vários arquivos (e.g., main.c, registro.h, arquivo.h etc.), os vários arquivos devem ser enviados dentro de um arquivo zip, rar ou tgz. Formatos de arquivos compactados que não puderem ser abertos pelo professor serão desconsiderados (e.g., usar o formato b1 -- ver link).

Apenas um dos membros do grupo deve enviar o trabalho.

O envio será aceito apenas até a data limite estabelecida. Atrasos serão bloqueados e, portanto, desconsiderados.